{
    "Варианты компиляции": {
      /* Основные параметры */
      // "инкрементный": true, /* Включить инкрементную компиляцию */
      "target": "es5",                          /* Укажите целевую версию ECMAScript: 'ES3' (по умолчанию), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' или 'ESNEXT'. */
      "модуль": "commonjs",                     /* Укажите генерацию кода модуля: "none", "commonjs", "amd", "system", "umd", "es2015" или "ESnext". */
      // "lib": [], /* Укажите файлы библиотеки, которые будут включены в компиляцию. */
      // "allowJs": true, /* Разрешить компиляцию файлов javascript. */
      // "checkJs": верно, /* Сообщает об ошибках в файлах .js. */
      // "jsx": "сохранить", / * Укажите генерацию кода JSX: "сохранить", "реагировать-родной" или "реагировать". */
      // "объявление": true, /* Генерирует соответствующий файл '.d.ts'. */
      // "declarationMap": true, /* Генерирует исходную карту для каждого соответствующего файла .d.ts. */
      "Исходная карта": true,                     /* Генерирует соответствующий файл .map. */
      // "outFile": "./", / * Объединять и выдавать выходные данные в один файл. */
      "outDir": "./dist",                        /* Redirect output structure to the directory. */
      "rootDir": "./src",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
      // "composite": true,                     /* Enable project compilation */
      // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
      // "removeComments": true,                /* Do not emit comments to output. */
      // "noEmit": true,                        /* Do not emit outputs. */
      // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
      // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
      // "isolatedModules": верно, /* Транспилируйте каждый файл как отдельный модуль (аналогично 'ts.transpileModule'). */
  
      /* Строгие параметры проверки типов */
      "строгий": true,                           /* Включить все параметры строгой проверки типов. */
      // "noImplicitAny": true, / * Вызывает ошибку в выражениях и объявлениях с подразумеваемым типом "any". */
      // "strictNullChecks": true, /* Включить строгие проверки на нулевое значение. */
      // "strictFunctionTypes": true, /* Включить строгую проверку типов функций. */
      // "strictBindCallApply": true, / * Включить строгие методы "привязки", "вызова" и "применения" к функциям. */
      // "strictPropertyInitialization": true, /* Включить строгую проверку инициализации свойств в классах. */
      // "noImplicitThis": true, / * Вызывает ошибку в выражениях "this" с подразумеваемым типом "any". */
      // "alwaysStrict": true, /* Выполнить синтаксический анализ в строгом режиме и выдать "использовать строгий" для каждого исходного файла. */
  
      /* Дополнительные проверки */
      // "noUnusedLocals": true, /* Сообщать об ошибках в неиспользуемых локальных файлах. */
      // "noUnusedParameters": true, /* Сообщать об ошибках в неиспользуемых параметрах. */
      // "noImplicitReturns": true, / * Сообщить об ошибке, когда не все пути кода в функции возвращают значение. */
      // "noFallthroughCasesInSwitch": true, / * Сообщать об ошибках для случаев сбоев в инструкции switch. */
  
      /* Параметры разрешения модуля */
      // "moduleResolution": "узел", /* Укажите стратегию разрешения модуля: "узел" (Node.js ) или "классический" (TypeScript pre-1.6). */
      // "baseUrl": "./", /* Базовый каталог для разрешения неабсолютных имен модулей. */
      // "пути": {}, /* Серия записей, которые повторно сопоставляют импорт с местоположениями поиска относительно 'baseUrl'. */
      // "Корневые папки": [], /* Список корневых папок, совокупное содержимое которых представляет структуру проекта во время выполнения. */
      // "Типовые ссылки": [], /* Список папок, из которых нужно включить определения типов. */
      // "типы": [], /* Файлы объявления типов, которые будут включены в компиляцию. */
      // "allowSyntheticDefaultImports": true, /* Разрешить импорт по умолчанию из модулей без экспорта по умолчанию. Это не влияет на выдачу кода, просто проверка типов. */
      "esModuleInterop": true,                  /* Включает взаимодействие между модулями CommonJS и ES посредством создания объектов пространства имен для всего импорта. Подразумевает 'allowSyntheticDefaultImports'. */
      // "Сохраняет символические ссылки": true, /* Не разрешает реальный путь символических ссылок. */
      // "Разрешить глобальный доступ": true, /* Разрешить доступ к глобалам UMD из модулей. */
  
    
      // "sourceRoot": "", / * Укажите местоположение, в котором отладчик должен размещать файлы TypeScript, а не исходные местоположения. */
      // "mapRoot": "", /* Укажите местоположение, в котором отладчик должен размещать файлы карт вместо сгенерированных местоположений. */
      // "inlineSourceMap": true, /* Выдает один файл с исходными картами вместо отдельного файла. */
      // "inlineSources": true, /* Выдает исходный код вместе с исходными картами в одном файле; требуется установить '--inlineSourceMap' или '--sourceMap'. */
  
      /* Экспериментальные варианты */
      // "experimentalDecorators": верно, /* Включает экспериментальную поддержку декораторов ES7. */
      // "emitDecoratorMetadata": true, /* Включает экспериментальную поддержку метаданных типа для декораторов. */
  
   
      "forceConsistentCasingInFileNames": true  /* Запретить ссылки с несогласованными ссылками на один и тот же файл. */
    }
  }
